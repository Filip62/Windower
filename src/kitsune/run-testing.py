#!/usr/bin/env python3.8

import argparse
import logging
import pickle
import sys

import tqdm

import utils
from KitNET.KitNET import KitNET
from FeatureReader import FeatureReaderCSV, FeatureReaderH5, FeatureReaderMulti

logger = logging.getLogger(__name__)

parser = argparse.ArgumentParser()
parser.add_argument('inputs', metavar='INFILE', type=str, nargs='+',
    help='csv/h5 file to process (generated by extraction)')
parser.add_argument('--csv', action='store_true', default=False,
    help='use csv format instead of h5')
parser.add_argument('-o', '--output', metavar='OUTFILE', type=str, default='-',
    help='path to write rmse output file')
parser.add_argument('-l', '--log-level', type=str, default='info',
    help='logging level (error, info, debug, ...)')
parser.add_argument('-n', '--packet-limit', type=int, default=sys.maxsize,
    help='the number of packets to process')
parser.add_argument('-m', '--model', metavar='MODEL', type=str,
    help='path to KitNET model file')

args = parser.parse_args()

# Set logging level
logging.basicConfig(level=args.log_level.upper())

# Create CSV/H5 reader
readers = []
for input in args.inputs:
    if args.csv:
        reader = FeatureReaderCSV(input)
    else:
        reader = FeatureReaderH5(input)
    readers.append(reader)
reader = FeatureReaderMulti(readers, args.packet_limit)

# Load detector (KitNET)
with utils.open_input(args.model, 'rb') as modelfile:
    detector = pickle.load(modelfile)

logger.info("running detector")

with utils.open_output(args.output) as outfile:
    for vector in tqdm.tqdm(reader):
        rmse = detector.process(vector)
        outfile.write(f"{rmse}\n")

logger.info("detection finished")
