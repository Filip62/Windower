#!/usr/bin/env python3.8

import argparse
import logging
import tqdm
import sys
import csv

from FeatureExtractor import FeatureExtractor
from utils import open_output

logger = logging.getLogger(__name__)

parser = argparse.ArgumentParser()
parser.add_argument('input', metavar='INFILE', type=str,
    help='tsv file to be processed (generated by tshark based on input pcap)')
parser.add_argument('-o', '--output', metavar='OUTFILE', type=str, default='-',
    help='csv file to be generated (containing extracted features)')
parser.add_argument('-l', '--log-level', type=str, default='info',
    help='logging level (error, info, debug, ...)')
parser.add_argument('-n', '--packet-limit', type=int, default=sys.maxsize,
    help='the number of packets to process')
parser.add_argument('-L', '--lambdas', type=float, nargs="+", default=[5, 3, 1, .1, .01],
    help='list of kitsune lambdas, default ')

args = parser.parse_args()

# Set logging level
logging.basicConfig(level=args.log_level.upper())

# Create feature extractor (AfterImage)
extractor = FeatureExtractor(args.input, args.packet_limit, args.lambdas)

logger.info("running extractor")

with open_output(args.output) as outfile:
    writer = csv.writer(outfile, delimiter=',')
    for vector in tqdm.tqdm(extractor):
        writer.writerow(vector)

logger.info("extractor finished")
